openapi: 3.0.0
info:
  title: Combined API
  version: "1.0.0"
paths:
  /comment/reportSpam:
    put:
      summary: Report Comment Spam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/editComment:
    put:
      summary: Edit Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/delete:
    delete:
      summary: Delete Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/hide:
    put:
      summary: Hide Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                hidden:
                  type: boolean
      responses: {}
  /comment/getSpamReports:
    post:
      summary: Get Spam Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subredditId:
                  type: string
      responses: {}
    /post/sorting:
    get:
      summary: Sorting
      description: Retrieve sorted posts on the homepage
      parameters:
        - name: best
          in: query
          description: Sort by best
          required: false
          schema:
            type: boolean
        - name: hot
          in: query
          description: Sort by hot
          required: false
          schema:
            type: boolean
        - name: new
          in: query
          description: Sort by new
          required: false
          schema:
            type: boolean
        - name: top
          in: query
          description: Sort by top
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/createPost:
    post:
      summary: Create Post
      description: Create a new post on the homepage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
                media:
                  type: string
                link:
                  type: string
                NSFW:
                  type: boolean
                replyNotifications:
                  type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/topCommunities:
    get:
      summary: Top Communities
      description: Retrieve top communities on the homepage
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/joinCommunity:
    post:
      summary: Join Community
      description: Join a community on the homepage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subRedditID:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/viewCommunity:
    get:
      summary: View Community
      description: View a community on the homepage
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  # /post/sorting:
  #   get:
  #     summary: Sorting
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  #       - name: Hot
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: New
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: Top
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: Random
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #     responses: {}
  # /post/createPost:
  #   post:
  #     summary: Create Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               title:
  #                 type: string
  #               text:
  #                 type: string
  #               media:
  #                 type: string
  #               link:
  #                 type: string
  #               NSFW:
  #                 type: boolean
  #               replyNotifications:
  #                 type: boolean
  #     responses: {}
  # /subreddit/topCommunities:
  #   get:
  #     summary: Top Communities
  #     responses: {}
  # /subreddit/joinCommunity:
  #   post:
  #     summary: Join Community
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               subRedditID:
  #                 type: string
  #     responses: {}
  # /subreddit/viewCommunity:
  #   get:
  #     summary: View Community
  #     responses: {}
  # /message/compose:
  #   post:
  #     summary: Compose Message
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               to:
  #                 type: string
  #               subject:
  #                 type: string
  #               message:
  #                 type: string
  #     responses: {}
  # /message/getAllInbox:
  #   get:
  #     summary: Get All Inbox
  #     responses: {}
  # /message/getUnreadInbox:
  #   get:
  #     summary: Get Unread Inbox
  #     responses: {}
  # /message/getMessage:
  #   get:
  #     summary: Get Message
  #     responses: {}
  # /message/getCommentsReplies:
  #   get:
  #     summary: Get Comments Replies
  #     responses: {}
  # /message/getPostsReplies:
  #   get:
  #     summary: Get Posts Replies
  #     responses: {}
  # /message/getMentions:
  #   get:
  #     summary: Get Mentions
  #     responses: {}
  # /message/getSentMessages:
  #   get:
  #     summary: Get Sent Messages
  #     responses: {}
  # /notification/getNotification:
  #   get:
  #     summary: Get Notification
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /notification/getUnreadNotification:
  #   get:
  #     summary: Get Unread Notification
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /notification/hide:
  #   put:
  #     summary: Hide Notification
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               notificationId:
  #                 type: string
  #               hidden:
  #                 type: boolean
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /post/getAllPosts:
  #   get:
  #     summary: Get All Posts
  #     responses: {}
  # /post/upvote:
  #   put:
  #     summary: Upvote
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/downvote:
  #   put:
  #     summary: Downvote
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/save:
  #   put:
  #     summary: Save
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/unsave:
  #   put:
  #     summary: Unsave
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/editPost:
  #   put:
  #     summary: Edit Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /posts/lockPost:
  #   put:
  #     summary: Lock Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               isLocked:
  #                 type: boolean
  #     responses: {}
  # /posts/unlockPost:
  #   put:
  #     summary: Unlock Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               isLocked:
  #                 type: boolean
  #     responses: {}
  # /posts/delete:
  #   delete:
  #     summary: Delete Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/hide:
  #   put:
  #     summary: Hide Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               hidden:
  #                 type: boolean
  #     responses: {}
  # /post/reportSpam:
  #   get:
  #     summary: Report Post as Spam
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  #     responses: {}
  # /post/getSpamReports:
  #   get:
  #     summary: Get Spam Reports
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               subredditId:
  #                 type: string
  #     responses: {}
  # /subreddit/sorting:
  #   get:
  #     summary: Sorting
  #     description: Retrieve sorted posts in a subreddit
  #     parameters:
  #       - name: Hot
  #         in: query
  #         description: Sort by hot
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: New
  #         in: query
  #         description: Sort by new
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: Top
  #         in: query
  #         description: Sort by top
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: Random
  #         in: query
  #         description: Sort randomly
  #         required: false
  #         schema:
  #           type: boolean
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/createPost:
  #   post:
  #     summary: Create Post
  #     description: Create a new post in a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               title:
  #                 type: string
  #               text:
  #                 type: string
  #               media:
  #                 type: string
  #               link:
  #                 type: string
  #               NSFW:
  #                 type: boolean
  #               replyNotifications:
  #                 type: boolean
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/banUser:
  #   post:
  #     summary: Ban User
  #     description: Ban a user from a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               userId:
  #                 type: string
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/unbanUser:
  #   post:
  #     summary: Unban User
  #     description: Unban a user from a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               userId:
  #                 type: string
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}