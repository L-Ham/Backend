openapi: 3.0.0
info:
  title: Combined API
  version: "1.0.0"
paths:
  /comment/reportSpam:
    put:
      summary: Report Comment Spam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/editComment:
    put:
      summary: Edit Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/delete:
    delete:
      summary: Delete Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/hide:
    put:
      summary: Hide Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                hidden:
                  type: boolean
      responses: {}
  /comment/getSpamReports:
    post:
      summary: Get Spam Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subredditId:
                  type: string
      responses: {}
  /post/sorting:
    get:
      summary: Sorting
      description: Retrieve sorted posts on the homepage
      parameters:
        - name: best
          in: query
          description: Sort by best
          required: false
          schema:
            type: boolean
        - name: hot
          in: query
          description: Sort by hot
          required: false
          schema:
            type: boolean
        - name: new
          in: query
          description: Sort by new
          required: false
          schema:
            type: boolean
        - name: top
          in: query
          description: Sort by top
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/createPost:
    post:
      summary: Create Post
      description: Create a new post on the homepage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
                media:
                  type: string
                link:
                  type: string
                NSFW:
                  type: boolean
                replyNotifications:
                  type: boolean
      responses:
        '201':
          description: Created
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/topCommunities:
    get:
      summary: Top Communities
      description: Retrieve top communities on the homepage
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/joinCommunity:
    post:
      summary: Join Community
      description: Join a community on the homepage
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subRedditID:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /subreddit/viewCommunity:
    get:
      summary: View Community
      description: View a community on the homepage
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/compose:
    post:
      summary: Compose
      description: Compose a new message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getAllInbox:
    get:
      summary: Get All Inbox
      description: Retrieve all messages in the inbox
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getUnreadInbox:
    get:
      summary: Get Unread Inbox
      description: Retrieve unread messages in the inbox
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getMessage:
    get:
      summary: Get Message
      description: Retrieve a specific message
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getCommentsReplies:
    get:
      summary: Get Comments Replies
      description: Retrieve replies to comments
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getPostsReplies:
    get:
      summary: Get Posts Replies
      description: Retrieve replies to posts
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getMentions:
    get:
      summary: Get Mentions
      description: Retrieve mentions
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /message/getSentMessages:
    get:
      summary: Get Sent Messages
      description: Retrieve sent messages
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /notification/getNotification:
    get:
      summary: Get Notification
      description: Retrieve notifications
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /notification/getUnreadNotification:
    get:
      summary: Get Unread Notification
      description: Retrieve unread notifications
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /notification/hide:
    put:
      summary: Hide Notification
      description: Hide a notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationId:
                  type: string
                hidden:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/getAllPosts:
    get:
      summary: Get All Posts
      description: Retrieve all posts
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/upvote:
    put:
      summary: Upvote
      description: Upvote a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/downvote:
    put:
      summary: Downvote
      description: Downvote a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/save:
    put:
      summary: Save
      description: Save a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/unsave:
    put:
      summary: Unsave
      description: Unsave a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/editPost:
    put:
      summary: Edit Post
      description: Edit a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/lockPost:
    put:
      summary: Lock Post
      description: Lock a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                isLocked:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/unlockPost:
    put:
      summary: unlockPost
      description: Unlock a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                isLocked:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /posts/delete:
    delete:
      summary: Delete Post
      description: Delete a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/hide:
    put:
      summary: Hide Post
      description: Hide a post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                hidden:
                  type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/reportSpam:
    get:
      summary: Report Post as Spam
      description: Report a post as spam
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /post/getSpamReports:
    get:
      summary: Get Spam Reports
      description: Get spam reports for a post
      parameters:
        - name: subredditId
          in: query
          description: ID of the subreddit
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /searchUsers:
    get:
      summary: Search Users
      description: Search for users
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          description: Sort by hot
          schema:
            type: boolean
        - name: Top
          in: query
          description: Sort by top
          schema:
            type: boolean
        - name: New
          in: query
          description: Sort by new
          schema:
            type: boolean
        - name: Most Comments
          in: query
          description: Sort by most comments
          schema:
            type: boolean
        - name: Relevance
          in: query
          description: Sort by relevance
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /searchPosts:
    get:
      summary: Search Posts
      description: Search for posts
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          description: Sort by hot
          schema:
            type: boolean
        - name: Top
          in: query
          description: Sort by top
          schema:
            type: boolean
        - name: New
          in: query
          description: Sort by new
          schema:
            type: boolean
        - name: Most Comments
          in: query
          description: Sort by most comments
          schema:
            type: boolean
        - name: Relevance
          in: query
          description: Sort by relevance
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /searchComments:
    get:
      summary: Search Comments
      description: Search for comments
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          description: Sort by hot
          schema:
            type: boolean
        - name: Top
          in: query
          description: Sort by top
          schema:
            type: boolean
        - name: New
          in: query
          description: Sort by new
          schema:
            type: boolean
        - name: Most Comments
          in: query
          description: Sort by most comments
          schema:
            type: boolean
        - name: Relevance
          in: query
          description: Sort by relevance
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /searchCommunities:
    get:
      summary: Search Communities
      description: Search for communities
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          description: Sort by hot
          schema:
            type: boolean
        - name: Top
          in: query
          description: Sort by top
          schema:
            type: boolean
        - name: New
          in: query
          description: Sort by new
          schema:
            type: boolean
        - name: Most Comments
          in: query
          description: Sort by most comments
          schema:
            type: boolean
        - name: Relevance
          in: query
          description: Sort by relevance
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /searchHashTag:
    get:
      summary: Search HashTag
      description: Search for hashtags
      parameters:
        - name: token
          in: header
          description: User authentication token
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          description: Sort by hot
          schema:
            type: boolean
        - name: Top
          in: query
          description: Sort by top
          schema:
            type: boolean
        - name: New
          in: query
          description: Sort by new
          schema:
            type: boolean
        - name: Most Comments
          in: query
          description: Sort by most comments
          schema:
            type: boolean
        - name: Relevance
          in: query
          description: Sort by relevance
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json: {}
        '400':
          description: Bad Request
          content:
            application/json: {}
  /settings/userSettings:
    put:
      summary: Update Account Settings
      description: Update user account settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                gender:
                  type: string
                deleteAccount:
                  type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /settings/profileSettings:
    put:
      summary: Update Profile Settings
      description: Update user profile settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                displayName:
                  type: string
                about:
                  type: string
                link:
                  type: string
                appName:
                  type: string
                avatarImage:
                  type: string
                bannerImage:
                  type: string
                NSFW:
                  type: boolean
                allowFollow:
                  type: boolean
                contentVisibility:
                  type: boolean
                communitiesVisibility:
                  type: boolean
                clearHistory:
                  type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /settings/safetyAndPrivacySettings:
    put:
      summary: Update Safety and Privacy Settings
      description: Update user safety and privacy settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                blockUser:
                  type: string
                muteCommunity:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /settings/feedSettings:
    put:
      summary: Update Feed Settings
      description: Update user feed settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                adultContent:
                  type: boolean
                autoPlayMedia:
                  type: boolean
                communityThemes:
                  type: boolean
                communityContentSort:
                  type: string
                globalContentView:
                  type: string
                postsInNewTab:
                  type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /settings/notificationsSettings:
    put:
      summary: Update Notifications Settings
      description: Update user notifications settings
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                mentions:
                  type: boolean
                comments:
                  type: boolean
                upVotesPosts:
                  type: boolean
                upVotesComments:
                  type: boolean
                repliesComments:
                  type: boolean
                newFollowers:
                  type: boolean
                postsFollowed:
                  type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/sorting:
    get:
      summary: Sorting
      description: Get sorted subreddit posts
      parameters:
        - name: Hot
          in: query
          schema:
            type: boolean
        - name: New
          in: query
          schema:
            type: boolean
        - name: Top
          in: query
          schema:
            type: boolean
        - name: Random
          in: query
          schema:
            type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/createPost:
    post:
      summary: Create Post
      description: Create a new post in a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
                media:
                  type: string
                link:
                  type: string
                NSFW:
                  type: boolean
                replyNotificaitions:
                  type: boolean
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/banUser:
    post:
      summary: Ban User
      description: Ban a user from a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/unbanUser:
    post:
      summary: Unban User
      description: Unban a user from a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/edited:
    get:
      summary: Edited
      description: Get edited posts in a subreddit
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/deleteBanner:
    delete:
      summary: Delete Banner
      description: Delete subreddit banner
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/uploadBanner:
    put:
      summary: Upload Banner
      description: Upload subreddit banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Banner:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/uploadIcon:
    put:
      summary: Upload Icon
      description: Upload subreddit icon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Icon:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/Delete Icon:
    delete:
      summary: Delete Icon
      description: Delete subreddit icon
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/approveJoin:
    post:
      summary: Approve Join Request
      description: Approve a user's request to join a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/rejectJoin:
    put:
      summary: Reject Join Request
      description: Reject a user's request to join a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/addRule:
    post:
      summary: Add Subreddit Rule
      description: Add a rule to a subreddit
      parameters:
        - name: Posts
          in: query
          schema:
            type: boolean
        - name: Comments
          in: query
          schema:
            type: boolean
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rule:
                  type: string
                reason:
                  type: string
                description:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/getRules:
    get:
      summary: Get Subreddit Rules
      description: Get rules of a subreddit
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  /subreddit/addRemovalReason:
    post:
      summary: Add Removal Reason
      description: Add a removal reason to a subreddit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                Message:
                  type: string
      responses:
        '200':
          description: OK
        '400':
          description: Bad Request
  # /post/sorting:
  #   get:
  #     summary: Sorting
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  #       - name: Hot
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: New
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: Top
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #       - name: Random
  #         in: query
  #         schema:
  #           type: boolean
  #         required: false
  #     responses: {}
  # /post/createPost:
  #   post:
  #     summary: Create Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               title:
  #                 type: string
  #               text:
  #                 type: string
  #               media:
  #                 type: string
  #               link:
  #                 type: string
  #               NSFW:
  #                 type: boolean
  #               replyNotifications:
  #                 type: boolean
  #     responses: {}
  # /subreddit/topCommunities:
  #   get:
  #     summary: Top Communities
  #     responses: {}
  # /subreddit/joinCommunity:
  #   post:
  #     summary: Join Community
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               subRedditID:
  #                 type: string
  #     responses: {}
  # /subreddit/viewCommunity:
  #   get:
  #     summary: View Community
  #     responses: {}
  # /message/compose:
  #   post:
  #     summary: Compose Message
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               to:
  #                 type: string
  #               subject:
  #                 type: string
  #               message:
  #                 type: string
  #     responses: {}
  # /message/getAllInbox:
  #   get:
  #     summary: Get All Inbox
  #     responses: {}
  # /message/getUnreadInbox:
  #   get:
  #     summary: Get Unread Inbox
  #     responses: {}
  # /message/getMessage:
  #   get:
  #     summary: Get Message
  #     responses: {}
  # /message/getCommentsReplies:
  #   get:
  #     summary: Get Comments Replies
  #     responses: {}
  # /message/getPostsReplies:
  #   get:
  #     summary: Get Posts Replies
  #     responses: {}
  # /message/getMentions:
  #   get:
  #     summary: Get Mentions
  #     responses: {}
  # /message/getSentMessages:
  #   get:
  #     summary: Get Sent Messages
  #     responses: {}
  # /notification/getNotification:
  #   get:
  #     summary: Get Notification
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /notification/getUnreadNotification:
  #   get:
  #     summary: Get Unread Notification
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /notification/hide:
  #   put:
  #     summary: Hide Notification
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               notificationId:
  #                 type: string
  #               hidden:
  #                 type: boolean
  #     responses: {}
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  # /post/getAllPosts:
  #   get:
  #     summary: Get All Posts
  #     responses: {}
  # /post/upvote:
  #   put:
  #     summary: Upvote
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/downvote:
  #   put:
  #     summary: Downvote
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/save:
  #   put:
  #     summary: Save
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/unsave:
  #   put:
  #     summary: Unsave
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/editPost:
  #   put:
  #     summary: Edit Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /posts/lockPost:
  #   put:
  #     summary: Lock Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               isLocked:
  #                 type: boolean
  #     responses: {}
  # /posts/unlockPost:
  #   put:
  #     summary: Unlock Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               isLocked:
  #                 type: boolean
  #     responses: {}
  # /posts/delete:
  #   delete:
  #     summary: Delete Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #     responses: {}
  # /post/hide:
  #   put:
  #     summary: Hide Post
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               postId:
  #                 type: string
  #               hidden:
  #                 type: boolean
  #     responses: {}
  # /post/reportSpam:
  #   get:
  #     summary: Report Post as Spam
  #     parameters:
  #       - name: token
  #         in: header
  #         required: true
  #         schema:
  #           type: string
  #     responses: {}
  # /post/getSpamReports:
  #   get:
  #     summary: Get Spam Reports
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               subredditId:
  #                 type: string
  #     responses: {}
  # /subreddit/sorting:
  #   get:
  #     summary: Sorting
  #     description: Retrieve sorted posts in a subreddit
  #     parameters:
  #       - name: Hot
  #         in: query
  #         description: Sort by hot
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: New
  #         in: query
  #         description: Sort by new
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: Top
  #         in: query
  #         description: Sort by top
  #         required: false
  #         schema:
  #           type: boolean
  #       - name: Random
  #         in: query
  #         description: Sort randomly
  #         required: false
  #         schema:
  #           type: boolean
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/createPost:
  #   post:
  #     summary: Create Post
  #     description: Create a new post in a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               title:
  #                 type: string
  #               text:
  #                 type: string
  #               media:
  #                 type: string
  #               link:
  #                 type: string
  #               NSFW:
  #                 type: boolean
  #               replyNotifications:
  #                 type: boolean
  #     responses:
  #       '201':
  #         description: Created
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/banUser:
  #   post:
  #     summary: Ban User
  #     description: Ban a user from a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               userId:
  #                 type: string
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}
  # /subreddit/unbanUser:
  #   post:
  #     summary: Unban User
  #     description: Unban a user from a subreddit
  #     requestBody:
  #       required: true
  #       content:
  #         application/json:
  #           schema:
  #             type: object
  #             properties:
  #               userId:
  #                 type: string
  #     responses:
  #       '200':
  #         description: OK
  #         content:
  #           application/json: {}
  #       '400':
  #         description: Bad Request
  #         content:
  #           application/json: {}