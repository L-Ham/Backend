openapi: 3.0.0
info:
  title: Combined API
  version: "1.0.0"
  # _postman_id: "74285141-b2c5-499b-895e-400c8da93cd7"
  name: Subreddit
  schema: https://schema.getpostman.com/json/collection/v2.1.0/collection.json
  _exporter_id: "23392578"
  _collection_link: https://solar-star-469904.postman.co/workspace/2be89b45-d5ac-483e-9999-7000ac61276c/collection/33377382-74285141-b2c5-499b-895e-400c8da93cd7?action=share&source=collection_link&creator=23392578
paths:
  /comment/reportSpam:
    put:
      summary: Report Comment Spam
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/editComment:
    put:
      summary: Edit Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/delete:
    delete:
      summary: Delete Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
      responses: {}
  /comment/hide:
    put:
      summary: Hide Comment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                commentId:
                  type: string
                hidden:
                  type: boolean
      responses: {}
  /comment/getSpamReports:
    post:
      summary: Get Spam Report
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subredditId:
                  type: string
      responses: {}
  /post/sorting:
    get:
      summary: Sorting
      parameters:
        - name: best
          in: query
          schema:
            type: boolean
          required: false
        - name: hot
          in: query
          schema:
            type: boolean
          required: false
        - name: new
          in: query
          schema:
            type: boolean
          required: false
        - name: top
          in: query
          schema:
            type: boolean
          required: false
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses: {}
  /post/createPost:
    post:
      summary: Create Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
                media:
                  type: string
                link:
                  type: string
                NSFW:
                  type: boolean
                replyNotifications:
                  type: boolean
      responses: {}
  /subreddit/topCommunities:
    get:
      summary: Top Communities
      responses: {}
  /subreddit/joinCommunity:
    post:
      summary: Join Community
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subRedditID:
                  type: string
      responses: {}
  /subreddit/viewCommunity:
    get:
      summary: View Community
      responses: {}
  /message/compose:
    post:
      summary: Compose Message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                to:
                  type: string
                subject:
                  type: string
                message:
                  type: string
      responses: {}
  /message/getAllInbox:
    get:
      summary: Get All Inbox
      responses: {}
  /message/getUnreadInbox:
    get:
      summary: Get Unread Inbox
      responses: {}
  /message/getMessage:
    get:
      summary: Get Message
      responses: {}
  /message/getCommentsReplies:
    get:
      summary: Get Comments Replies
      responses: {}
  /message/getPostsReplies:
    get:
      summary: Get Posts Replies
      responses: {}
  /message/getMentions:
    get:
      summary: Get Mentions
      responses: {}
  /message/getSentMessages:
    get:
      summary: Get Sent Messages
      responses: {}
  /notification/getNotification:
    get:
      summary: Get Notification
      responses: {}
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
  /notification/getUnreadNotification:
    get:
      summary: Get Unread Notification
      responses: {}
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
  /notification/hide:
    put:
      summary: Hide Notification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                notificationId:
                  type: string
                hidden:
                  type: boolean
      responses: {}
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
  /post/getAllPosts:
    get:
      summary: Get All Posts
      responses: {}
  /post/upvote:
    put:
      summary: Upvote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /post/downvote:
    put:
      summary: Downvote
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /post/save:
    put:
      summary: Save
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /post/unsave:
    put:
      summary: Unsave
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /post/editPost:
    put:
      summary: Edit Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /posts/lockPost:
    put:
      summary: Lock Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                isLocked:
                  type: boolean
      responses: {}
  /posts/unlockPost:
    put:
      summary: unlockPost
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                isLocked:
                  type: boolean
      responses: {}
  /posts/delete:
    delete:
      summary: Delete Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
      responses: {}
  /post/hide:
    put:
      summary: Hide Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                postId:
                  type: string
                hidden:
                  type: boolean
      responses: {}
  /post/reportSpam:
    get:
      summary: Report Post as Spam
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
      responses: {}
  /post/getSpamReports:
    get:
      summary: Get Spam Reports
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                subredditId:
                  type: string
      responses: {}
  /subreddit/sorting:
    get:
      summary: Sorting
      parameters:
        - name: token
          in: header
          required: true
          schema:
            type: string
        - name: Hot
          in: query
          schema:
            type: boolean
          required: false
        - name: New
          in: query
          schema:
            type: boolean
          required: false
        - name: Top
          in: query
          schema:
            type: boolean
          required: false
        - name: Random
          in: query
          schema:
            type: boolean
          required: false
  /subreddit/createPost:
    post:
      summary: Create Post
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                text:
                  type: string
                media:
                  type: string
                link:
                  type: string
                NSFW:
                  type: boolean
                replyNotificaitions:
                  type: boolean
      responses: {}
  /subreddit/banUser:
    post:
      summary: Ban User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses: {}
  /subreddit/unbanUser:
    post:
      summary: Unban User
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses: {}
  /subreddit/edited:
    get:
      summary: Edited
      responses: {}
  /subreddit/deleteBanner:
    delete:
      summary: Delete Banner
      responses: {}
  /subreddit/uploadBanner:
    put:
      summary: Upload Banner
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Banner:
                  type: string
      responses: {}
  /subreddit/uploadIcon:
    put:
      summary: Upload Icon
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Icon:
                  type: string
      responses: {}
  /subreddit/Delete Icon:
    delete:
      summary: Delete Icon
      responses: {}
  /subreddit/approveJoin:
    post:
      summary: Approve Join Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses: {}
  /subreddit/rejectJoin:
    put:
      summary: Reject Join Request
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses: {}
  /subreddit/addRule:
    post:
      summary: Add Subreddit Rule
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                rule:
                  type: string
                reason:
                  type: string
                description:
                  type: string
      parameters:
        - name: Posts
          in: query
          schema:
            type: boolean
          required: false
        - name: Comments
          in: query
          schema:
            type: boolean
          required: false
      responses: {}
  /subreddit/getRules:
    get:
      summary: Get Subreddit Rules
      responses: {}
  /subreddit/addRemovalReason:
    post:
      summary: Add Removal Reason
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                Title:
                  type: string
                Message:
                  type: string
      responses: {}
